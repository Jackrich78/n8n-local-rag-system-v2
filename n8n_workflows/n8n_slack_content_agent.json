{
  "name": "n8n-slack-content-agent",
  "nodes": [
    {
      "parameters": {
        "model": "anthropic/claude-3.7-sonnet",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        6060,
        2300
      ],
      "id": "b1ece8d7-e573-4488-964e-11474f71871d",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "j3F8ETc7G9Zz3Nk6",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "trigger": [
          "message"
        ],
        "channelId": {
          "__rl": true,
          "value": "C08GJ3CG342",
          "mode": "list",
          "cachedResultName": "slacktrigger_n8n_blog"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        7780,
        2940
      ],
      "id": "b8ad3970-4413-4374-915d-949feb787ae6",
      "name": "Slack Trigger",
      "webhookId": "c432a5ad-cd77-4751-ba17-60d5e8dae2d2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        2560,
        1760
      ],
      "id": "1ef4b540-5432-4621-a44d-b9f50bad9927",
      "name": "When chat message received",
      "webhookId": "202a90db-971d-40e5-a86d-6c3e748f3a40"
    },
    {
      "parameters": {
        "model": "perplexity/sonar",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        5100,
        2600
      ],
      "id": "5a44c5b6-f74b-4abe-82e6-00e06981121f",
      "name": "OpenRouter Chat Model3",
      "credentials": {
        "openRouterApi": {
          "id": "j3F8ETc7G9Zz3Nk6",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract and merge JSON from Code Node output\nconst jsonData = $input.all().map(item => item.json);\n\n// Function to format structured text for Google Docs\nfunction formatContent(data) {\n    let content = `# Research\\n\\n`;\n\n    data.forEach(section => {\n        content += `## ${section.section}\\n`;\n\n        // Loop through all keys except 'section'\n        Object.keys(section).forEach(key => {\n            if (key !== \"section\") {\n                if (Array.isArray(section[key])) {\n                    content += `- **${key.replace(/_/g, \" \")}**:\\n  - ` + section[key].join(\"\\n  - \") + `\\n\\n`;\n                } else {\n                    content += `- **${key.replace(/_/g, \" \")}**: ${section[key]}\\n\\n`;\n                }\n            }\n        });\n    });\n\n    return content.trim();\n}\n\n// Generate the formatted text output\nconst documentText = formatContent(jsonData);\n\n// Return structured text for Google Docs\nreturn [{\n    json: {\n        document_name: \"Research\",\n        content: documentText // This ensures 'content' is always returned\n    }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5620,
        2280
      ],
      "id": "66d587f3-84f1-40f7-8610-7b225826a60e",
      "name": "Code2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Brand voice to follow \n\n- Write with authentic expertise and direct communication\n- Use confident, straightforward language demonstrating real experience\n- Be intelligent without academic or overly formal phrasing\n- Speak directly to the reader as if sharing insider knowledge\n- Avoid corporate jargon and marketing-speak\n- Use contractions and occasional casual phrases to maintain authenticity\n- Make definitive statements rather than hedging\n- Balance technical accuracy with accessibility\n- Structure content with clear, punchy headers and concise explanations\n- Prioritize actionable advice over theoretical concepts\n- Sound like a successful practitioner sharing hard-earned wisdom\n- Avoid both overly casual language (\"stuff,\" \"randos\") and artificially elevated vocabulary (\"magnetizes elite collaborators\")\n- Use precise, impactful language that respects reader intelligence while remaining accessible\n\n\nInstructions\n\nUse research as context only {{ $json.output }} in order to create a narrative driven posts that give readers actionable insights and takeaways and impact business in positive ways (only use data if it's relevant don't pick topics around AI marketing tools blindly)\n\nWrite one detailed (400 words) linkedin post from one of the ideas - {{ $json.content }}\n\nContent themes + angles to which you will create post - \n\nLinkedin format - Carousel, text post\n\nContent ideas to follow to create post - ``` {{ $json.content }} ``` (Pick around how marketers can scale marketing efforts with AI using n8n for specific marketing use case like ad campaign, scaling outbound, sclaing content creation)\n\n\n- Avoid sharing hashtags\n- Avoid taking format from content ideas \n- Create 1 detailed post ( 400 words) \n- Topic - Pick topic around how marketers can scale marketing efforts with AI using n8n for specific marketing use case\n\n\nOutput format\n\n- Title\n- Content\n- Avoid sending this format {\n      \"topic\": \"\",\n      \"content\": \"\",\n}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a LinkedIn content strategist and conversion copywriter.\n\nYour goal is to generate high-performing, long-form LinkedIn posts — each based on a strategic content idea.\n\nUse content ideas and come up with 1 400 word posts\n\nThese are not casual updates or short tips. Each post should be a 400-word mini-article designed to:\n\nShare deep insight, story, or tactical advice in an authentic, scroll-stopping way\n\nFeel natural for a professional audience, with a human voice and practical depth\n\nWork well as a single post or be repurposed into a carousel\n\nWriting Guidelines:\nStart with a hook in the first 2 lines that will expand the post (e.g., bold statement, problem question, surprising stat)\n\nQuickly introduce the core idea or story and why it matters\n\nBreak the middle into 2–3 key insights, steps, or moments\n\nUse line breaks for visual flow and readability\n\nEnd with a light CTA or prompt to encourage conversation (e.g., “What’s your experience?” or “Curious to hear your take.”)\n\nMaintain a professional but human tone — clarity > cleverness\n\nOutput Rules:\nReturn only the structured JSON object\n\nNo extra commentary, explanations, or markdown formatting\n\nEach post should be ~300 words, clearly written, and formatted for native LinkedIn use\n\nAvoid hashtags and emojis\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        6120,
        2000
      ],
      "id": "1252e704-f722-4f8d-ba41-b77e30f7a38c",
      "name": "Linkedin post generating agent"
    },
    {
      "parameters": {
        "content": "Analyze YouTube & X for Topics and Context",
        "height": 1180,
        "width": 1840,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2520,
        1660
      ],
      "id": "8634f040-8665-4c48-bb5d-acde523b73a8",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "Generate Channel Specific Content\n",
        "height": 1180,
        "width": 720,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        5980,
        1660
      ],
      "id": "6e989609-b61d-49ac-88ba-07faea3797a1",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "Human in the Loop Review & Automated Distribution\n\n\n\n\n\n\n",
        "height": 1180,
        "width": 2380,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        6880,
        1640
      ],
      "id": "220d2cc2-6506-478b-afb7-c485082dc42e",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/streamers~youtube-scraper/run-sync-get-dataset-items",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"dateFilter\": \"month\",\n    \"downloadSubtitles\": false,\n    \"hasCC\": false,\n    \"hasLocation\": false,\n    \"hasSubtitles\": false,\n    \"is360\": false,\n    \"is3D\": false,\n    \"is4K\": false,\n    \"isBought\": false,\n    \"isHD\": false,\n    \"isHDR\": false,\n    \"isLive\": false,\n    \"isVR180\": false,\n    \"lengthFilter\": \"between420\",\n    \"maxResultStreams\": 0,\n    \"maxResults\": 1,\n    \"maxResultsShorts\": 10,\n    \"preferAutoGeneratedSubtitles\": true,\n    \"saveSubsToKVS\": true,\n    \"searchQueries\": [\n        \"{{ $json.chatInput }}\"\n    ],\n    \"sortingOrder\": \"views\",\n    \"subtitlesLanguage\": \"en\",\n    \"videoType\": \"video\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2960,
        1760
      ],
      "id": "6ff4c820-a033-43a6-a37d-04feb9be39b9",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "X4iqNN2MOope8agd",
          "name": "Apify"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/pintostudio~youtube-transcript-scraper/run-sync-get-dataset-items?",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"videoUrl\": \"{{ $json.url }}\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3580,
        1940
      ],
      "id": "0ecedb75-2cf9-43e6-a405-7dea79feca82",
      "name": "HTTP Request2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "X4iqNN2MOope8agd",
          "name": "Apify"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3180,
        1760
      ],
      "id": "d87bd229-7c13-475f-9b4b-0dd22a073a0a",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Access all input items (each one is a video)\nconst items = $input.all();\n\n// For each video item, join the captions from data[]\nconst result = items.map(item => {\n  const data = item.json.data;\n\n  // Safely join text only if data is an array\n  const fullCaption = Array.isArray(data)\n    ? data.map(d => d.text).join(' ')\n    : '';\n\n  return {\n    json: {\n      full_caption: fullCaption\n    }\n  };\n});\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3480,
        1740
      ],
      "id": "80fa0926-f212-417e-844f-6ea71430807c",
      "name": "Code"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {
          "maxRetries": 2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4700,
        2500
      ],
      "id": "9ccc606e-cd32-4b62-8e15-f8b2ef37d353",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "IkEKo7mBR6fRcl5d",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get all input items\nconst items = $input.all();\n\n// Get current time and calculate threshold for 10 days ago\nconst now = new Date();\nconst tenDaysAgo = new Date(now.getTime() - 10 * 24 * 60 * 60 * 1000); // 10 days in ms\n\n// Filter based on both `reply_to` and `created_at`\nconst filtered = items.filter(item => {\n  const replyTo = item.json.reply_to;\n  const createdAt = item.json.created_at;\n\n  const isOriginalPost =\n    replyTo === undefined ||\n    replyTo === null ||\n    replyTo === '[undefined]' ||\n    (Array.isArray(replyTo) && replyTo.length === 0);\n\n  const isRecent =\n    createdAt && new Date(createdAt) >= tenDaysAgo;\n\n  return isOriginalPost && isRecent;\n});\n\nreturn filtered;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        2220
      ],
      "id": "6da7e5be-0eee-4085-b72f-44370a6ff295",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        4060,
        2240
      ],
      "id": "e5fee1ab-b0bc-4c21-8c33-2783d01d6b70",
      "name": "Merge5"
    },
    {
      "parameters": {
        "fieldToSplitOut": "chatInput",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2740,
        1760
      ],
      "id": "c5776924-51ee-4abe-9a1a-c19f7681bfcd",
      "name": "Split Out"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Youtube transcript: {{ $json.full_caption }}\n\nTw - {{ $json.text }}\n\n### TASK:\nUsing the above, generate a list of **actionable content ideas that are strictly related to makreting nothing technical**. For each idea, include:\n\n- **Title**: Short and clear.\n- **Hook**: Scroll-stopping idea to pull people in.\n- **Format**: Suggest whether it's better as a video, one-pager, thread, etc.\n- **Angle**: What unique point of view ( around how marketers can scale marketing efforts with AI using n8n for specific marketing use case)\n\nNote: Only pick transcripts that are in english \n\n- Avoid technical jargons and technical topics\n- Suggest marketing use cases for beginners who are marketers\n- Marketing Angle, hook, title etc for non-technical marketers\n\n\n**A. YouTube Transcripts from Other Creators**  \nThese are insights from videos that are trending or educational. Use these to understand:\n- What problems they’re solving\n- What frameworks or tools are used\n- What kinds of hooks or structures they follow\n\n[Paste YT transcript content here or insert variable e.g., {{ $json.full_caption }}\n\n**B. My Top Performing Twitter Posts**  \nThese are short-form content examples that resonated well with our audience. Use these to:\n- Extract what tones, angles, or use cases work\n- Mirror themes, language style, and audience engagement patterns\n\n[Paste tweet text here or insert variable e.g.,{{ $json.text }}\n\n\n",
        "options": {
          "systemMessage": "You are an expert content strategist helping create high-impact content tailored to a marketing and automation-savvy audience.\n\n### OBJECTIVE:\nGenerate **actionable content ideas** based on:\n1. YouTube transcripts from other creators in our niche\n2. My best-performing Twitter posts\n\nThe output should help us create **videos and one-pagers** that:\n- Are useful and practical\n- Mirror themes and tones that work for our audience\n- Explore new but relevant ideas\n- Lean into content formats that already perform well for us"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        4680,
        2260
      ],
      "id": "5972600b-4d45-4f9f-82d5-0c2e98671b34",
      "name": "Content idea generator"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=using the text:``` {{ $json.output }} ```\n\nResearch and find marketing use cases - around how marketers can scale marketing efforts with AI using n8n for specific marketing use case like ad campaign, scaling outbound, sclaing content creation\n\nPlease conduct deep research on the topic above. Specifically:\n\n- Key Trends and Insights\n- Marketing use cases\n- What’s currently happening in the industry or niche?\n- Are there stats, frameworks, or case studies worth referencing?\n- Popular Opinions vs. Expert Takes\n- What are people saying on social platforms or forums?\n- Are there any contrarian, expert-backed, or field-tested perspectives?\n- Data, Stats, or Real Examples\n- Include any performance benchmarks, studies, or business use cases\n- Source Links or Summarized Citations\n- If quoting or citing, include the origin (author, source, link)\n\nOutput fomat\n\na. topic\nb. key insights\nc. expert takes\nd. Supporting data with source\ne. citations\nf. use cases",
        "options": {
          "systemMessage": "You are a senior research strategist trained in high-depth content discovery and synthesis.\n\nYour role is to explore authoritative sources, trends, case studies, and opinion patterns related to a specific topic or query.\n\nYou always prioritize factual accuracy, real-world examples, and strategic relevance over surface-level summaries.\n\nYour insights are designed to inform downstream content agents who will create long-form posts, thought leadership, or campaign assets based on your research.\n\nDo not write final posts or content. Your output should consist of organized, useful findings that serve as a research base."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        5220,
        2300
      ],
      "id": "c27cae1b-3ed3-4076-8109-3c01d564a65a",
      "name": "Research agent",
      "notes": "- Could split to do dedicated research per topic idea\n- reword prompt so that input is more contained"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        5780,
        1900
      ],
      "id": "94bff011-c7f0-472f-95f7-ca54050e3388",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.first().json.output || '';\n\nconst cleanedLines = raw\n  .split('\\n')\n  .map(line => {\n    const trimmed = line.trim();\n\n    // Remove lines like \"# LinkedIn content\", \"## undefined\", or just \"#\"\n    if (/^#+\\s*(linkedin content|undefined)?$/i.test(trimmed)) return '';\n    if (/^- \\*\\*.*\\*\\*:\\s*#/.test(trimmed)) return '';\n    if (/^#+\\s*$/.test(trimmed)) return '';\n\n    // Convert markdown headers to plain lines\n    const headerMatch = trimmed.match(/^#+\\s*(.+)/);\n    if (headerMatch) {\n      return headerMatch[1].trim();\n    }\n\n    return trimmed;\n  });\n\n// Rebuild the cleaned output while preserving paragraph breaks\nlet finalOutput = '';\nfor (let i = 0; i < cleanedLines.length; i++) {\n  const line = cleanedLines[i];\n\n  if (line === '') {\n    // Preserve paragraph breaks (double line breaks)\n    finalOutput += '\\n\\n';\n  } else {\n    // Regular content\n    finalOutput += line + '\\n';\n  }\n}\n\nreturn [\n  {\n    json: {\n      linkedin_post: finalOutput.trim()\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6520,
        2000
      ],
      "id": "d15de77d-2096-40ff-b28f-3dbade5a9611",
      "name": "Linkedin formatted output1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data[0].b64_json",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        7920,
        2360
      ],
      "id": "5a83af68-eaf5-435d-ab90-ff35242ea818",
      "name": "Convert to File2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/images/generations",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-image-1\",\n  \"prompt\": \"spaceships in space\",\n  \"n\": 1,\n  \"size\": \"1536x1024\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7500,
        2380
      ],
      "id": "7e7e246d-e650-4190-8690-ec666fc0be0c",
      "name": "Linkedin image generation using openAI1",
      "retryOnFail": false,
      "credentials": {
        "openAiApi": {
          "id": "IkEKo7mBR6fRcl5d",
          "name": "OpenAi account"
        }
      },
      "onError": "continueRegularOutput",
      "notes": "Verify identify for image models"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        7600,
        1920
      ],
      "id": "05f70c48-d1f2-4d55-a2f1-505af7ed99c8",
      "name": "Merge8"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "user": {
          "__rl": true,
          "value": "U0817UZ44Q0",
          "mode": "list",
          "cachedResultName": "jack"
        },
        "message": "=Here is the post - https://docs.google.com/document/d/{{ $json.documentId }}/edit?tab=t.0",
        "approvalOptions": {
          "values": {
            "approvalType": "double"
          }
        },
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        8160,
        1920
      ],
      "id": "fae86b63-2e10-4744-94f8-b839dd0b0095",
      "name": "Human in the loop1",
      "webhookId": "085ce980-c9c9-42d5-916d-4e8442d2cfb8",
      "credentials": {
        "slackApi": {
          "id": "gRKuNGXq7Cvs9y4I",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "98673ca3-970f-4927-a230-709f3edd99b9",
              "leftValue": "={{ $json.data.approved }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        8380,
        1920
      ],
      "id": "7389189c-c9b3-481e-8d34-6509331634c9",
      "name": "If2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        8700,
        2180
      ],
      "id": "4ea4f6a1-d941-4455-a913-aea1e7c2f9a6",
      "name": "Merge9"
    },
    {
      "parameters": {
        "person": "PnQwcsps5V",
        "text": "={{ $json.linkedin_post }}",
        "shareMediaCategory": "IMAGE",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.linkedIn",
      "typeVersion": 1,
      "position": [
        9060,
        2180
      ],
      "id": "7247446a-bbb6-499d-8bea-94241c8efbc2",
      "name": "Post on linkedin1"
    },
    {
      "parameters": {
        "content": "Research for Additional Data Points & Generate Specific Post Ideas",
        "height": 1180,
        "width": 1620
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4360,
        1660
      ],
      "id": "61005c9c-5a4b-4147-9eb9-76740264cd91",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Content: {{json.linkedin_post}} \n\nFor the given post content, generate 1–2 short, vivid image prompts that visually capture the core idea. Each should include:\n\n- A short OpenAI-friendly prompt (20 words or less)\n- A clear visual **style** (flat, 3D, cinematic, sketch, vaporwave, etc.)\n- A suggested **format** (square, portrait, wide)\n\nOutput JSON format:\n{\n  \"image_prompt\": \"...\",\n  \"style\": \"...\",\n  \"format\": \"...\"\n}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an assistant that converts short social media posts—especially LinkedIn-style content—into high-quality image prompts for generative AI models like DALL·E or Stable Diffusion.\n\nYour goal is to extract the main visual idea from the post and convert it into a short, vivid, OpenAI-friendly image prompt.\n\nFor each prompt:\n\nUse clear visual nouns and actions (e.g., \"solo creator,\" \"digital agents,\" \"holographic screen\")\n\nAvoid abstract language (e.g., no \"growth mindset\" or \"innovation\")\n\nKeep it under 20 words\n\nInclude a visual style (e.g. isometric, flat vector, cinematic photo, watercolor sketch)\n\nInclude a suggested format (e.g. square, 16:9 wide, vertical portrait)"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        6980,
        2300
      ],
      "id": "acaa5553-faec-4646-aab0-0961bb740696",
      "name": "Image prompt generator"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "content_idea"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5320,
        2520
      ],
      "id": "1e68dd56-1f2e-4c27-b56d-b4d7e90ed670",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "perplexity_research"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        6200,
        2220
      ],
      "id": "af81e890-06e4-4e35-8edb-f73a0b412d26",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "linkedin_post"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        7040,
        2520
      ],
      "id": "0e2b4f85-f996-4443-9151-9ce3beb2d3ac",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        6880,
        2520
      ],
      "id": "216d4435-3c10-4ee5-b114-fbd5b1b9b45b",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "IkEKo7mBR6fRcl5d",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/danek~twitter-scraper-ppr/run-sync-get-dataset-items?",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"includeReplies\": false,\n    \"includeRetweets\": false,\n    \"max_posts\": 10,\n    \"username\": \"elonmusk\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2920,
        2220
      ],
      "id": "d9510df0-8419-45fc-9399-4bffbed26ba2",
      "name": "Twitter via APIFY",
      "credentials": {
        "httpHeaderAuth": {
          "id": "X4iqNN2MOope8agd",
          "name": "Apify"
        }
      }
    },
    {
      "parameters": {
        "content": "## Apify Scraping Youtube/Twitter\n- Decide twitter accounts\n- Make sure Youtube transcripts are loaded"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3920,
        2040
      ],
      "typeVersion": 1,
      "id": "ebc0a207-a070-4124-a214-a457516dd0a7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "folderId": "1nPYqB69LJcvFVJEUKx3wc1F7DA2dzhtk",
        "title": "Linkedin posts"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        7300,
        1840
      ],
      "id": "39c45491-ea28-4648-acf6-fc61c175ea04",
      "name": "Create Linkedin Draft",
      "executeOnce": true,
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "bDtJvhjyvcXQ7wGB",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6720,
        1880
      ],
      "id": "71d6a838-bb3c-4253-84e0-50fe7c095dd7",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "=https://docs.google.com/document/d/{{ $json.id }}/edit",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $json.linkedin_post }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        7900,
        1920
      ],
      "id": "4822f3c6-b765-4af3-9757-29aa1789127f",
      "name": "Paste to Docs",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "bDtJvhjyvcXQ7wGB",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Slack bot input\nset an input parameter for the Slack bot to trigger the scrape and research."
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2260,
        1660
      ],
      "typeVersion": 1,
      "id": "7d3153e1-ffb6-44ac-be39-f985807ebb08",
      "name": "Sticky Note5"
    }
  ],
  "pinData": {
    "HTTP Request": [
      {
        "json": {
          "title": "CONVERTÍ A MIS VECINOS EN PAYASOS DE LA DEEP WEB 3",
          "type": "video",
          "id": "kwiW33uvoNw",
          "url": "https://www.youtube.com/watch?v=kwiW33uvoNw",
          "thumbnailUrl": "https://i.ytimg.com/vi/kwiW33uvoNw/maxresdefault.jpg",
          "viewCount": 9395012,
          "date": "2025-05-29T02:08:19.000Z",
          "likes": 535000,
          "location": null,
          "channelName": "Fede Vigevani",
          "channelUrl": "https://www.youtube.com/@fedevigevani",
          "channelId": "UCoQm-PeHC-cbJclKJYJ8LzA",
          "channelUsername": "fedevigevani",
          "numberOfSubscribers": 67700000,
          "duration": "00:18:47",
          "commentsCount": 38704,
          "text": "mis vecinos se convirtieron en lourdes, DR. Lizarraga y Ruiz Ortega\n\nShows Ecuador y Colombia: https://www.improntamusic.com/elmundo...\n\nInstagrams:\n  / fedevigevani  \n  / iam.yankee  \n  / itscarlitozz  \n  / lukas.urkijo  \n\nCONTACTO: contactovigevani@gmail.com \n\nEdición del video:   / chuyitogs1  \n\nGracias por apoyarme :)\nFede",
          "descriptionLinks": [
            {
              "url": "https://www.improntamusic.com/elmundodefedevigevani",
              "text": "https://www.improntamusic.com/elmundo..."
            },
            {
              "url": "https://instagram.com/fedevigevani",
              "text": "  / fedevigevani  "
            },
            {
              "url": "https://instagram.com/iam.yankee",
              "text": "  / iam.yankee  "
            },
            {
              "url": "https://instagram.com/itscarlitozz",
              "text": "  / itscarlitozz  "
            },
            {
              "url": "https://instagram.com/lukas.urkijo",
              "text": "  / lukas.urkijo  "
            },
            {
              "url": "https://www.instagram.com/chuyitogs1",
              "text": "  / chuyitogs1  "
            }
          ],
          "subtitles": null,
          "order": 0,
          "commentsTurnedOff": false,
          "comments": null,
          "fromYTUrl": "https://www.youtube.com/results?search_query=LA&sp=CAMSBggEEAEYAw%3D%3D",
          "isMonetized": null,
          "hashtags": [],
          "formats": [],
          "isMembersOnly": false,
          "input": "LA"
        }
      }
    ]
  },
  "connections": {
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Linkedin post generating agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Research agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Linkedin post generating agent": {
      "main": [
        [
          {
            "node": "Linkedin formatted output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Content idea generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        []
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Content idea generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Twitter via APIFY",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content idea generator": {
      "main": [
        [
          {
            "node": "Research agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research agent": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Linkedin post generating agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Linkedin image generation using openAI1": {
      "main": [
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Linkedin formatted output1": {
      "main": [
        [
          {
            "node": "Create Linkedin Draft",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge8",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge9",
            "type": "main",
            "index": 1
          },
          {
            "node": "Image prompt generator",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge8": {
      "main": [
        [
          {
            "node": "Paste to Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Human in the loop1": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Merge9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "Merge9",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge9": {
      "main": [
        []
      ]
    },
    "Image prompt generator": {
      "main": [
        [
          {
            "node": "Linkedin image generation using openAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Research agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Linkedin post generating agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Image prompt generator",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Image prompt generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Twitter via APIFY": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Linkedin Draft": {
      "main": [
        [
          {
            "node": "Merge8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Paste to Docs": {
      "main": [
        [
          {
            "node": "Human in the loop1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "faf53680-304e-4622-bfba-6a66bb2a9757",
  "meta": {
    "instanceId": "e700d34c5408b0209d1ce8b933c3446d0d7eaed27a3db321d68067caa1332dae"
  },
  "id": "7UOcsGYf4Hw3rbpg",
  "tags": []
}